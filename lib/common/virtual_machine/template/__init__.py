"""
:mod:`template` -- Template library
===================================

.. module:: virt.lib.common.virtual_machine.template
This module provides class and methods to deploy virtual machines from
pre-configured template virtual machine images.

Basic examples is available at :ref:`api.virtual_machine.index`

"""

import os
import platform
import importlib
import shutil
import re
import time

import wget

from virt.lib.core import log_handler
from virt.lib.core import exception
from virt.lib.common import network
from virt.lib.common.network import test_network
from virt.lib.common import virtual_machine


log = log_handler.get_logger(__name__)


class BasePool(object):
    def __init__(self, path):
        """
        Args:
            path (str): A root directory where "vm" and "template" directories
                will be created
        """
        self._path = path

    @property
    def path(self):
        return self._path

    def create(self):
        """Create a pool for "template" and "vm" under self.path"""
        raise NotImplementedError

    def remove(self):
        """Destory a pool"""
        raise NotImplementedError


class BaseTemplate(object):
    name = None
    url = None
    os_type = None
    md5sum = None

    def __init__(self, file_ext, **kwargs):
        self._file_ext = file_ext

        storage = importlib.import_module(
            'virt.lib.%s.storage' % platform.system().lower())

        template_pool = storage.Pool(name='template')
        vm_pool = storage.Pool(name='vm')

        if not template_pool.exist or not vm_pool.exist:
            raise exception.ConfigException(
                'template and/or vm pools do not exist')

        self.template_path = {
            'url': self.url + '/' + self.name + '.' + template_pool.file_ext,
            'dir': template_pool.path,
            'file': os.path.join(
                template_pool.path, self.name + '.' + template_pool.file_ext)
        }
        self.vm_dir = vm_pool.path
        self._vm_manager = virtual_machine.get_vm_manager()

    @property
    def file_ext(self):
        """Return a file extension of a virtual disk file"""
        return self._file_ext

    @property
    def vm_manager(self):
        """Return a virt.lib.common.virtual_machine.BaseManager or its child
        classes that is bound to this template"""
        return self._vm_manager

    @staticmethod
    def _get_name(mgmt_ip_addr=None, name=None):
        """Return a hostname which is generated by mgmt_ip_addr or name"""
        if not mgmt_ip_addr and not name:
            raise exception.ValueException(
                'Both "mgmt_ip_addr" and "name" cannot be "None"')

        if mgmt_ip_addr and not re.match(
                '\d+\.\d+\.\d+\.\d+/\d+', mgmt_ip_addr):
            raise exception.ValueException(
                '"mgmt_ip_addr" does not have a format x.x.x.x/x')

        return name if name else test_network.get_hostname(mgmt_ip_addr)

    @staticmethod
    def _get_all_subclasses(cls):
        all_subclasses = []
        for subclass in cls.__subclasses__():
            all_subclasses.append(subclass)
            all_subclasses.extend(cls._get_all_subclasses(subclass))
        return all_subclasses

    def validate(self, vswitch_list=None):
        """Validate the configuration to deploy a virtual machine"""
        raise NotImplementedError

    def _download(self):
        """Download the disk image from the URL"""
        if not os.access(self.template_path['dir'], 0):
            raise exception.ConfigException(
                'Cannot find "template" pool at %s' % self.template_path['dir']
            )
        if not os.access(self.template_path['file'], 0):
            log.info(
                'Downloading the template image %s ... ' %
                self.template_path['file'])
            wget.download(
                url=self.template_path['url'], out=self.template_path['file'])
            print('\n')  # workaround for line overlap of wget

        return True

    def create(
            self, name=None, mgmt_ip_addr=None, test_ip_addr_dict=None,
            cpu=1, memory=512, exist=None, test_vf_dev_dict=None):
        """Create a virtual machine and power it up

        Args:
            name (str): A name of the virtual machine. If not given, will
                use auto-generated honstame using "mgmt_ip_addr"
            mgmt_ip_addr (str): Management IP address. If not given, "name"
                must be given.
            test_ip_addr_dict (dict): key=vswitch (network) name, value is
                list of <IP addresses/prefix>
            test_vf_dev_dict(dict): key=pci_device_id(VF), value is
                list of <IP addresses/prefix>
            cpu (int): A number of CPUs for the VM
            memory (int): A size of the memory in MB
            exist (str): A policy to handle if a virtual machine or disk
                already exists. choices=[None|overwrite|reuse]
        """
        # Download the image fromt he URL
        self._download()

        test_ip_addr_dict = test_ip_addr_dict or {}
        vswitch_list = list(
			k for k in test_ip_addr_dict.keys() 
			if k is not None) + \
			['Management Network']
        self.validate(vswitch_list=vswitch_list)

        # Add a management network
        vnic_list = [
            network.get_vnic(
                network='Management Network',
                mac_addr=test_network.get_mac_addr(mgmt_ip_addr, True),
                mgmt_iface=True
            )
        ]

        # Add a test network
        for _network, _test_ip_addr_list in test_ip_addr_dict.items():
            if _network is None:
                continue
            for _test_ip_addr in _test_ip_addr_list:
                vnic_list.append(
                    network.get_vnic(
                        network=_network,
                        mac_addr=test_network.get_mac_addr(_test_ip_addr)
                    )
                )

	    # Add a pci hostdev
        for _pci_id, _test_ip_addr_list in test_vf_dev_dict.items():
            for _test_ip_addr in _test_ip_addr_list:
                vnic_list.append(
	    	        network.get_pci_vnic(
	    		        vnic_pci=_pci_id,
	    		        mac_addr=test_network.get_mac_addr(_test_ip_addr)
	    	    )
	    	)

        # Get the disk file name and the virtual machine name
        disk_file = os.path.join(self.vm_dir, name) + '.' + self.file_ext
        name = self._get_name(mgmt_ip_addr=mgmt_ip_addr, name=name)
        create_vm = False
        if name in self.vm_manager.get_vm_list():
            if exist == 'reuse':
                log.info('Reuse the existing VM %s.' % name)
            elif exist == 'overwrite':
                log.info('Removing the existing virtual machine ... ')
                self.remove(name)
                create_vm = True
            else:
                raise exception.ConfigException(
                    'Virtual machine %s already exists' % name)
        else:
            create_vm = True

        if create_vm:
            # Copy the file
            if os.access(disk_file, 0) and exist is None:
                raise exception.ConfigException(
                    'Disk file %s already exists. You can force to create a '
                    'new virtual disk with "--exist" option' % disk_file)
            elif os.access(disk_file, 0) and exist == 'reuse':
                log.info('Reuse the existing virtual disk %s ' % disk_file)
            else:
                log.info('Cloning a virtual disk ... ')
                shutil.copy(self.template_path['file'], disk_file)
                time.sleep(10)
                log.info('\tCompleted')

            self.vm_manager.create(
                name=name,
                disk_file=disk_file,
                vnic_list=vnic_list,
                cpu=cpu, memory=memory)
        else:
            if platform.system().lower() == 'windows':
                self.vm_manager.update(
                    name=name,
                    vnic_list=vnic_list,
                    cpu=cpu,
                    memory=memory
                )

        log.info('Powering up the virtual machine ... ')
        self.vm_manager.power(name=name, oper='on')

        log.info('Creating the virtual machine is completed')

    def remove(self, name):
        log.info('Powering off the virtual machine %s ... ' % name)
        self.vm_manager.power(name=name, oper='off')
        log.info('Removing the virtual machine %s ... ' % name)
        self.vm_manager.remove(name)


def get_pool(path):
    """Return an instantiated pool object

    Args:
        path (str): A path to the pool

    """
    return importlib.import_module(
        'virt.lib.%s.virtual_machine.template' % platform.system().lower()
    ).Pool(path=path)


def get_template(template_name):
    """Return an instantiated template object

    Args:
        template_name (str): Name of a template

    """
    return importlib.import_module(
        'virt.lib.%s.virtual_machine.template' % platform.system().lower()
    ).get_template(template_name)


def get_template_list():
    """Return a list of available templates"""
    return importlib.import_module(
        'virt.lib.%s.virtual_machine.template' % platform.system().lower()
    ).get_template_list()
